name: Release

on:
  workflow_call:
    inputs:
      version:
        type: string
        description: 'Version to release'
        required: true

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Config
        run: |
          npm config set commit-hooks false
          npm config set git-tag-version false

      - name: Version
        run: npm version ${{ inputs.version }}

      - name: Install
        run: npm ci

      - name: Build & Package
        run: npx vsce package

      - name: Release
        uses: actions/github-script@v7
        with:
          script: |
            const releaseResult = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'v${{ inputs.version }}',
              name: 'v${{ inputs.version }}',
              generate_release_notes: true,
              prerelease: false,
            });

            const release = releaseResult.data;

            const globber = await glob.create('*.vsix');

            for await (const file of globber.globGenerator()) {
              const uploadResult = await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
                name: file.split('/').pop(),
                data: await fs.readFile(file),
              });
            }
